import tkinter as tk

LARGE_FONT = ("Verdana", 35, "bold")
SMALL_FONT = ("Verdana", 16)
DIGIT_FONT = ("Verdana", 24, "bold")
DEFULT_FONT = ("Verdana", 20)

WHITE = "#FFFFFF"
DARK_GRAY = "#131313"
LIGHT_BLUE = "#4caba4"
BLUE_GREEN = "#00877E"
ORANGE = "#cc8400"
DARK_GRAY1 = "#141414"

class Calculator:
    def __init__(self):
        self.window = tk.Tk()
        self.window.geometry("375x667")
        self.window.resizable(0,0)
        self.window
        self.window.title("CodeGeeksâ„¢ Calculator")
        
        self.total = ""
        self.expression = ""
        self.display_frame = self.display_frame()
        
        self.exp_display = tk.Label(self.display_frame, text = self.expression, anchor = tk.E, bg = DARK_GRAY1, fg = WHITE, padx = 24, font = SMALL_FONT)
        self.exp_display.pack(expand = True, fill = "both")
        self.total_display = tk.Label(self.display_frame, text = self.total, anchor = tk.E, bg = DARK_GRAY1, fg = WHITE, padx = 24, font = LARGE_FONT)
        self.total_display.pack(expand = True, fill = "both")

        self.digits = {
            7: (1,1), 8: (1,2), 9: (1,3),
            4: (2,1), 5: (2,2), 6: (2,3),
            1: (3,1), 2: (3,2), 3: (3,3),
            0: (4,1), ".": (4,2)
        }
        
        self.operations = {"/": "\u00F7", "*": "\u00D7", "-": "-", "+": "+" }
        self.button_frame = self.button_frame()
        
        self.button_frame.rowconfigure(0, weight = 1)

        for x in range(1,5):
            self.button_frame.rowconfigure(x, weight = 1)
            self.button_frame.columnconfigure(x, weight = 1)

        self.digit_buttons()
        self.operator_buttons()
        self.special_buttons()
        
    def special_buttons(self):
        self.clear_button()
        self.equals_button()
        self.square_button()
        self.sqrt_button()
        self.delete_button()

    def display_frame(self):
        frame = tk.Frame(self.window, height = 221, bg = DARK_GRAY)
        frame.pack(expand = True, fill = "both")
        return frame   
    
    def digit_buttons(self):
        for digit, grid in self.digits.items():
            button = tk.Button(self.button_frame, text = str(digit), bg = DARK_GRAY, fg = WHITE, font = DIGIT_FONT, borderwidth = 0, command = lambda x = digit: self.add_expression(x))
            button.grid(row = grid[0], column = grid[1], sticky = tk.NSEW)

    def operator_buttons(self):
        i = 0
        for operator, symbol in self.operations.items():
            button = tk.Button(self.button_frame, text = symbol, bg = DARK_GRAY, fg = BLUE_GREEN, font = DEFULT_FONT, borderwidth = 0, command = lambda x = operator: self.add_operator(x))
            button.grid(row = i, column = 4, sticky = tk.NSEW)
            i +=1
            
    def clear_button(self):
        button = tk.Button(self.button_frame, text = "C", bg = DARK_GRAY, fg = ORANGE, font = DEFULT_FONT, borderwidth = 0, command = self.clear)
        button.grid(row = 0, column = 1, sticky = tk.NSEW)
        
    def delete_button(self):
        button = tk.Button(self.button_frame, text = "Del", bg = DARK_GRAY, fg = ORANGE, font = DEFULT_FONT, borderwidth = 0, command = self.delete)
        button.grid(row = 0, column = 3, sticky = tk.NSEW)
        
    def square_button(self):
        button = tk.Button(self.button_frame, text = "x\u00b2", bg = DARK_GRAY, fg = BLUE_GREEN, font = DEFULT_FONT, borderwidth = 0, command = self.square)
        button.grid(row = 0, column = 2, sticky = tk.NSEW)
        
    def sqrt_button(self):
        button = tk.Button(self.button_frame, text = "\u221ax", bg = DARK_GRAY, fg = BLUE_GREEN, font = DEFULT_FONT, borderwidth = 0, command = self.sqrt)
        button.grid(row = 4, column = 3, sticky = tk.NSEW)
        
    def equals_button(self):
        button = tk.Button(self.button_frame, text = "=", bg = DARK_GRAY, fg = LIGHT_BLUE, font = DEFULT_FONT, borderwidth = 0, command = self.evaluate)
        button.grid(row = 4, column = 4, sticky = tk.NSEW)
        
    def button_frame(self):
        frame = tk.Frame()
        frame.pack(expand = True, fill = "both")
        return frame

    def run(self):
        self.window.mainloop()

if __name__ == "__main__":
    calc = Calculator()
    calc.run()
